// 
generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("POSTGRES_URL") // uses connection pooling
	directUrl= env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
	id       	Int 	@id @default(autoincrement())

	cart				Cart? // 1к1
	orders				Order[]
	verificationCode 	VerificationCode?

	fullName 	String
	email 		String 	@unique
	password 	String
	role		UserRole @default(USER)
	verified	DateTime
	provider	String?
	providerId	String?

	createdAt 	DateTime @default(now())
	updatedAt	DateTime @updatedAt
}

enum UserRole {
	ADMIN
	USER
}

model Category {
	id 			Int		@id @default(autoincrement())

	name 		String	@unique
	products	Product[]
	
	createdAt 	DateTime @default(now())
	updatedAt	DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    ingredients Ingredient[]
    items       ProductItem[]

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    cartItems CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

model Ingredient {
	id 			Int		@id @default(autoincrement())

	name 		String
	price		Int
	imageUrl 	String
	products	Product[]
	cartItems	CartItem[]

	createdAt 	DateTime @default(now())
	updatedAt	DateTime @updatedAt
}

model Cart {
	id 			Int		@id @default(autoincrement())

	user   		User? 	@relation(fields: [userId], references: [id])
  	userId		Int?	@unique

	items		CartItem[]

	token		String // Для привяззки корзины незарегистрированному пользователю

	totalAmount Int 	@default(0)

	createdAt 	DateTime @default(now())
	updatedAt	DateTime @updatedAt
}

model CartItem {
	id 			Int		@id @default(autoincrement())

	cart			Cart @relation(fields: [cartId], references: [id])
	cartId			Int

	productItem		ProductItem @relation(fields: [productItemId], references: [id])
	productItemId	Int

    quantity 		Int @default(1)

	ingredients		Ingredient[]

	createdAt 	DateTime @default(now())
	updatedAt	DateTime @updatedAt
}

model Order {
	id 			Int @id @default(autoincrement())

	user		User? @relation(fields: [userId], references: [id])
	userId		Int?

	token		String

	totalAmount Int
	status 		OrderStatus
	paymentId	String?

	items 		Json

	fullName 	String
	email	 	String
	address 	String
	phone	 	String
	comment 	String?

	createdAt	DateTime @default(now())
	updatedAt	DateTime @updatedAt
}

enum OrderStatus {
	PENDING
	SUCCEEDED
	CANCELLED
}

model VerificationCode {
	id			Int @id @default(autoincrement())

	user		User @relation(fields: [userId], references: [id])
	userId		Int @unique

	code 		String @unique

	createdAt	DateTime @default(now())

	@@unique([userId, code])
}